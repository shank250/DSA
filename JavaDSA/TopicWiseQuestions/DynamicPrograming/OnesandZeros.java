public class OnesandZeros {
    // dp will help in cased where we are getting similar tm & tn in beteeen the recursion at the same level
    // here by same level i mean recursive call where same array elements id beening added
    Integer[][][] dp;

    private int maxSubset(Integer[][] arr, int m, int n, int tm, int tn, int index){
        // base case
        // when i am getting a value more than any of the threashold then i need to terminate
        // or if i have checked the all the elements in the list
        if(index == arr.length ) return 0;
        if( tm > m || tn > n) return -1;
        // checking if we have solved this subproblem
        if(dp[index][tm][tn] != null ) return dp[index][tm][tn];
      
        int val1 = Integer.MIN_VALUE, val2 = Integer.MIN_VALUE;
        // if(tm + arr[index][0] <= m && tn + arr[index][1] <= n) 
        val1 = 1 + maxSubset(arr, m, n, tm + arr[index][0], tn + arr[index][1], index + 1);
        val2 =  maxSubset(arr, m, n, tm, tn, index + 1);

        int membersCount = Math.max(val1, val2);

        dp[index][tm][tn] = membersCount;

        System.out.println(index + " " + tm + " " + tn) ;

        return membersCount;
    }
    
    public int findMaxForm(String[] strs, int m, int n) {
        //new array which stores no of zeros and no of ones
        Integer[][] arr = new Integer[strs.length][2];    
        int i = 0;
        for(String st: strs){
            int m2 = 0,n2 =0;
            for(int j = 0; j < st.length(); j++){ 
                // st.charAt(j) == '0' ? m++ : n++;
                if(st.charAt(j) == '0') m2++;
                else n2++;
            }
            arr[i][0] = m2;
            arr[i][1] = n2;
            i++;
        }
        dp = new Integer[strs.length][m + 1][n + 1];
        return maxSubset(arr, m, n, 0, 0, 0);
    }

    public static void main(String[] args) {
        OnesandZeros obj = new OnesandZeros();
        int ans = obj.findMaxForm(new String[]{}, 50, 50);
        System.out.println(ans);
    }
    
}
